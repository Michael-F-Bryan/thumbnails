/* automatically generated by rust-bindgen */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_ulong;
pub type DWORD = ::std::os::raw::c_ulong;
pub type UINT = ::std::os::raw::c_uint;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type HRESULT = ::std::os::raw::c_long;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub __bindgen_anon_1: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_1>())).LowPart
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_1>())).HighPart
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(HighPart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_2>())).LowPart
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_2>())).HighPart
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(HighPart)
        )
    );
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER>())).u as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER>())).QuadPart as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(QuadPart)
        )
    );
}
impl Default for _LARGE_INTEGER {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
impl ::std::fmt::Debug for _LARGE_INTEGER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_LARGE_INTEGER {{ union }}")
    }
}
pub type LARGE_INTEGER = _LARGE_INTEGER;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ULARGE_INTEGER {
    pub __bindgen_anon_1: _ULARGE_INTEGER__bindgen_ty_1,
    pub u: _ULARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: ULONGLONG,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ULARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: DWORD,
}
#[test]
fn bindgen_test_layout__ULARGE_INTEGER__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_ULARGE_INTEGER__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_ULARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_ULARGE_INTEGER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_ULARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ULARGE_INTEGER__bindgen_ty_1>())).LowPart
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ULARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ULARGE_INTEGER__bindgen_ty_1>())).HighPart
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ULARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(HighPart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ULARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: DWORD,
}
#[test]
fn bindgen_test_layout__ULARGE_INTEGER__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_ULARGE_INTEGER__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_ULARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_ULARGE_INTEGER__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_ULARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ULARGE_INTEGER__bindgen_ty_2>())).LowPart
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ULARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ULARGE_INTEGER__bindgen_ty_2>())).HighPart
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ULARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(HighPart)
        )
    );
}
#[test]
fn bindgen_test_layout__ULARGE_INTEGER() {
    assert_eq!(
        ::std::mem::size_of::<_ULARGE_INTEGER>(),
        8usize,
        concat!("Size of: ", stringify!(_ULARGE_INTEGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_ULARGE_INTEGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_ULARGE_INTEGER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ULARGE_INTEGER>())).u as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ULARGE_INTEGER),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ULARGE_INTEGER>())).QuadPart as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ULARGE_INTEGER),
            "::",
            stringify!(QuadPart)
        )
    );
}
impl Default for _ULARGE_INTEGER {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
impl ::std::fmt::Debug for _ULARGE_INTEGER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_ULARGE_INTEGER {{ union }}")
    }
}
pub type ULARGE_INTEGER = _ULARGE_INTEGER;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
pub type IID = GUID;
pub type CLSID = GUID;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FILETIME {
    pub dwLowDateTime: DWORD,
    pub dwHighDateTime: DWORD,
}
#[test]
fn bindgen_test_layout__FILETIME() {
    assert_eq!(
        ::std::mem::size_of::<_FILETIME>(),
        8usize,
        concat!("Size of: ", stringify!(_FILETIME))
    );
    assert_eq!(
        ::std::mem::align_of::<_FILETIME>(),
        4usize,
        concat!("Alignment of ", stringify!(_FILETIME))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FILETIME>())).dwLowDateTime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwLowDateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FILETIME>())).dwHighDateTime as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwHighDateTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct HBITMAP__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HBITMAP__() {
    assert_eq!(
        ::std::mem::size_of::<HBITMAP__>(),
        4usize,
        concat!("Size of: ", stringify!(HBITMAP__))
    );
    assert_eq!(
        ::std::mem::align_of::<HBITMAP__>(),
        4usize,
        concat!("Alignment of ", stringify!(HBITMAP__))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HBITMAP__>())).unused as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HBITMAP__),
            "::",
            stringify!(unused)
        )
    );
}
pub type OLECHAR = WCHAR;
pub type LPOLESTR = *mut OLECHAR;
#[repr(C)]
pub struct tagSTATSTG {
    pub pwcsName: LPOLESTR,
    pub type_: DWORD,
    pub cbSize: ULARGE_INTEGER,
    pub mtime: FILETIME,
    pub ctime: FILETIME,
    pub atime: FILETIME,
    pub grfMode: DWORD,
    pub grfLocksSupported: DWORD,
    pub clsid: CLSID,
    pub grfStateBits: DWORD,
    pub reserved: DWORD,
}
#[test]
fn bindgen_test_layout_tagSTATSTG() {
    assert_eq!(
        ::std::mem::size_of::<tagSTATSTG>(),
        80usize,
        concat!("Size of: ", stringify!(tagSTATSTG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagSTATSTG>(),
        8usize,
        concat!("Alignment of ", stringify!(tagSTATSTG))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).pwcsName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(pwcsName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).cbSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).mtime as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).ctime as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).atime as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).grfMode as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(grfMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).grfLocksSupported as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(grfLocksSupported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).clsid as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(clsid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).grfStateBits as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(grfStateBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagSTATSTG>())).reserved as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSTATSTG),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for tagSTATSTG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
impl ::std::fmt::Debug for tagSTATSTG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "tagSTATSTG {{ pwcsName: {:?}, type: {:?}, cbSize: {:?}, grfMode: {:?}, grfLocksSupported: {:?}, grfStateBits: {:?}, reserved: {:?} }}" , self . pwcsName , self . type_ , self . cbSize , self . grfMode , self . grfLocksSupported , self . grfStateBits , self . reserved )
    }
}
pub type STATSTG = tagSTATSTG;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IStreamVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IStream) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IStream) -> ULONG,
    >,
    pub Read: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            pv: *mut ::std::os::raw::c_void,
            cb: ULONG,
            pcbRead: *mut ULONG,
        ) -> HRESULT,
    >,
    pub Write: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            pv: *const ::std::os::raw::c_void,
            cb: ULONG,
            pcbWritten: *mut ULONG,
        ) -> HRESULT,
    >,
    pub Seek: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            dlibMove: LARGE_INTEGER,
            dwOrigin: DWORD,
            plibNewPosition: *mut ULARGE_INTEGER,
        ) -> HRESULT,
    >,
    pub SetSize: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            libNewSize: ULARGE_INTEGER,
        ) -> HRESULT,
    >,
    pub CopyTo: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            pstm: *mut IStream,
            cb: ULARGE_INTEGER,
            pcbRead: *mut ULARGE_INTEGER,
            pcbWritten: *mut ULARGE_INTEGER,
        ) -> HRESULT,
    >,
    pub Commit: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            grfCommitFlags: DWORD,
        ) -> HRESULT,
    >,
    pub Revert: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IStream) -> HRESULT,
    >,
    pub LockRegion: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            libOffset: ULARGE_INTEGER,
            cb: ULARGE_INTEGER,
            dwLockType: DWORD,
        ) -> HRESULT,
    >,
    pub UnlockRegion: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            libOffset: ULARGE_INTEGER,
            cb: ULARGE_INTEGER,
            dwLockType: DWORD,
        ) -> HRESULT,
    >,
    pub Stat: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            pstatstg: *mut STATSTG,
            grfStatFlag: DWORD,
        ) -> HRESULT,
    >,
    pub Clone: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IStream,
            ppstm: *mut *mut IStream,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IStreamVtbl() {
    assert_eq!(
        ::std::mem::size_of::<IStreamVtbl>(),
        112usize,
        concat!("Size of: ", stringify!(IStreamVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IStreamVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IStreamVtbl))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).QueryInterface as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).AddRef as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Release as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Read as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Write as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Seek as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Seek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).SetSize as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(SetSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).CopyTo as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(CopyTo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Commit as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Commit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Revert as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Revert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).LockRegion as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(LockRegion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).UnlockRegion as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(UnlockRegion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Stat as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStreamVtbl>())).Clone as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IStreamVtbl),
            "::",
            stringify!(Clone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IStream {
    pub lpVtbl: *mut IStreamVtbl,
}
#[test]
fn bindgen_test_layout_IStream() {
    assert_eq!(
        ::std::mem::size_of::<IStream>(),
        8usize,
        concat!("Size of: ", stringify!(IStream))
    );
    assert_eq!(
        ::std::mem::align_of::<IStream>(),
        8usize,
        concat!("Alignment of ", stringify!(IStream))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IStream>())).lpVtbl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IStream),
            "::",
            stringify!(lpVtbl)
        )
    );
}
impl Default for IStream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IInitializeWithStreamVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IInitializeWithStream,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IInitializeWithStream) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IInitializeWithStream) -> ULONG,
    >,
    pub Initialize: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IInitializeWithStream,
            pstream: *mut IStream,
            grfMode: DWORD,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IInitializeWithStreamVtbl() {
    assert_eq!(
        ::std::mem::size_of::<IInitializeWithStreamVtbl>(),
        32usize,
        concat!("Size of: ", stringify!(IInitializeWithStreamVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IInitializeWithStreamVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IInitializeWithStreamVtbl))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IInitializeWithStreamVtbl>())).QueryInterface
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IInitializeWithStreamVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IInitializeWithStreamVtbl>())).AddRef
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IInitializeWithStreamVtbl),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IInitializeWithStreamVtbl>())).Release
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IInitializeWithStreamVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IInitializeWithStreamVtbl>())).Initialize
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IInitializeWithStreamVtbl),
            "::",
            stringify!(Initialize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IInitializeWithStream {
    pub lpVtbl: *mut IInitializeWithStreamVtbl,
}
#[test]
fn bindgen_test_layout_IInitializeWithStream() {
    assert_eq!(
        ::std::mem::size_of::<IInitializeWithStream>(),
        8usize,
        concat!("Size of: ", stringify!(IInitializeWithStream))
    );
    assert_eq!(
        ::std::mem::align_of::<IInitializeWithStream>(),
        8usize,
        concat!("Alignment of ", stringify!(IInitializeWithStream))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IInitializeWithStream>())).lpVtbl as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IInitializeWithStream),
            "::",
            stringify!(lpVtbl)
        )
    );
}
impl Default for IInitializeWithStream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const WTS_ALPHATYPE_WTSAT_UNKNOWN: WTS_ALPHATYPE = 0;
pub const WTS_ALPHATYPE_WTSAT_RGB: WTS_ALPHATYPE = 1;
pub const WTS_ALPHATYPE_WTSAT_ARGB: WTS_ALPHATYPE = 2;
pub type WTS_ALPHATYPE = i32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IThumbnailProviderVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IThumbnailProvider,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IThumbnailProvider) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(This: *mut IThumbnailProvider) -> ULONG,
    >,
    pub GetThumbnail: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IThumbnailProvider,
            cx: UINT,
            phbmp: *mut HBITMAP,
            pdwAlpha: *mut WTS_ALPHATYPE,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IThumbnailProviderVtbl() {
    assert_eq!(
        ::std::mem::size_of::<IThumbnailProviderVtbl>(),
        32usize,
        concat!("Size of: ", stringify!(IThumbnailProviderVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IThumbnailProviderVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IThumbnailProviderVtbl))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IThumbnailProviderVtbl>())).QueryInterface
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IThumbnailProviderVtbl),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IThumbnailProviderVtbl>())).AddRef
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IThumbnailProviderVtbl),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IThumbnailProviderVtbl>())).Release
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IThumbnailProviderVtbl),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IThumbnailProviderVtbl>())).GetThumbnail
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IThumbnailProviderVtbl),
            "::",
            stringify!(GetThumbnail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IThumbnailProvider {
    pub lpVtbl: *mut IThumbnailProviderVtbl,
}
#[test]
fn bindgen_test_layout_IThumbnailProvider() {
    assert_eq!(
        ::std::mem::size_of::<IThumbnailProvider>(),
        8usize,
        concat!("Size of: ", stringify!(IThumbnailProvider))
    );
    assert_eq!(
        ::std::mem::align_of::<IThumbnailProvider>(),
        8usize,
        concat!("Alignment of ", stringify!(IThumbnailProvider))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IThumbnailProvider>())).lpVtbl as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IThumbnailProvider),
            "::",
            stringify!(lpVtbl)
        )
    );
}
impl Default for IThumbnailProvider {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
